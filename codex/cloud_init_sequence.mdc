---
description: Codex Cloud Init Sequence for Log-Driven Development environments
version: 1.1.0
date: 2025-03-20
---

# Codexクラウド初期化シーケンス / Codex Cloud Init Sequence

◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢
## 概要 / Overview
- Codexエージェントをクラウド環境で実行するための初期化手順を示します。
- This guide walks through the reproducible bootstrap steps so the Codex agent can join the Log-Driven Development (LDD) workflow.
◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢

## 事前条件 / Prerequisites
- Bash 5.x 以上
- Git, Python 3.10+, pip
- アクセス可能な `OPENAI_API_KEY`
- Writable workspace (default: `$HOME/repos`)

## 初期化フロー / Initialisation Flow

1. **スクリプト取得 / Fetch Script**
   - `codex/init_codex_cloud_env.sh` をダウンロード、またはリポジトリから取得します。
2. **実行権限付与 / Allow Execution**
   - `chmod +x codex/init_codex_cloud_env.sh`
3. **環境変数の調整 / Configure Overrides**
   - 必要に応じて以下の環境変数を指定して実行:
     ```bash
     REPO_URL=<custom_repo>
     TARGET_BRANCH=<branch>
     WORKSPACE_ROOT=<workspace_path>
     PYTHON_BIN=<python_command>
     ```
4. **初期化実行 / Run Initialiser**
   - `./codex/init_codex_cloud_env.sh`
   - クリーンなリポジトリクローンと `.venv` 作成、依存インストールを自動化します。
5. **.env 更新 / Update .env**
   - 生成された `.env` に `OPENAI_API_KEY` を記載し、その他の値を環境に合わせて編集します。
6. **LDDアセット確認 / Verify LDD Assets**
   - `@logging_template.mdc` と `@memory-bank.mdc` が存在することを確認し、`logs/` ディレクトリにアクセス権があるか検証します。

## ログ・メモリ連携 / Logging & Memory Hooks
- 初期化結果を `logs/system/` へ保存し、Codex実行開始時に参照できるようにします。
- メモリバンクには以下のスニペットを挿入し、Codexが参照できるコンテキストを保持します。

```markdown
### Codex Cloud Init Snapshot
- Repo Path: {TARGET_DIR}
- Branch: {TARGET_BRANCH}
- Venv: {VENV_DIR}
- Dependencies: affiliate_automation/requirements.txt
- Owner: {OPERATOR}
```

## 検証コマンド / Verification Commands
| Purpose | Command | Expected Result |
|---------|---------|----------------|
| Pythonバージョン確認 | `${PYTHON_BIN:-python3} --version` | 3.10 以上 |
| 依存関係の確認 | `source .venv/bin/activate && pip list` | 必須ライブラリが表示される |
| LDDテンプレート確認 | `ls @logging_template.mdc` | テンプレートが存在する |
| ログディレクトリ確認 | `ls logs/tasks` | 初期ディレクトリが作成されている |

## トラブルシューティング / Troubleshooting
- **未コミット変更が存在**: スクリプトは警告のみを出します。必要なら手動で stash してから再実行してください。
- **依存ファイルが見つからない**: `REQUIREMENTS_FILE` 環境変数で別の requirements ファイルを指定できます。
- **Pythonコマンドが存在しない**: `PYTHON_BIN` を `python` など適切なコマンドに変更してください。
- **プロキシ環境**: `PIP_INDEX_URL` や `HTTPS_PROXY` を事前にエクスポートしてから実行します。

## 次のステップ / Next Steps
- Codexプロンプトチェーンを `codex/codex_agent_template.mdc` で構築。
- `docs/codex/integration_guide.md` に沿ってログとメモリ更新を実施。
- 他エージェント（Cursor / Roo / Devin）とのハンドオフ計画を作成。
